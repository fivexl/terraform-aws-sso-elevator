FROM ghcr.io/astral-sh/uv:0.9.5 AS uv

# First, bundle the dependencies into the task root
FROM public.ecr.aws/lambda/python:3.13 AS builder

# Enable bytecode compilation for better cold-start performance
ENV UV_COMPILE_BYTECODE=1

# Disable installer metadata to create a deterministic layer
ENV UV_NO_INSTALLER_METADATA=1

# Enable copy mode to support bind mount caching
ENV UV_LINK_MODE=copy

# Bundle the layer dependencies (powertools) first
RUN --mount=from=uv,source=/uv,target=/bin/uv \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=layer/uv.lock,target=layer-uv.lock \
    --mount=type=bind,source=layer/pyproject.toml,target=layer-pyproject.toml \
    uv export --frozen --no-emit-workspace --no-dev --no-editable -o layer-requirements.txt && \
    uv pip install --python-platform linux --target "${LAMBDA_TASK_ROOT}" -r layer-requirements.txt

# Bundle the source dependencies into the Lambda task root
RUN --mount=from=uv,source=/uv,target=/bin/uv \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=src/uv.lock,target=uv.lock \
    --mount=type=bind,source=src/pyproject.toml,target=pyproject.toml \
    uv export --frozen --no-emit-workspace --no-dev --no-editable -o requirements.txt && \
    uv pip install --python-platform linux --target "${LAMBDA_TASK_ROOT}" -r requirements.txt

FROM public.ecr.aws/lambda/python:3.13

# Copy the runtime dependencies from the builder stage
COPY --from=builder ${LAMBDA_TASK_ROOT} ${LAMBDA_TASK_ROOT}

# Copy the application code
COPY src/ ${LAMBDA_TASK_ROOT}/

# Set the AWS Lambda handler
CMD ["revoker.lambda_handler"]
