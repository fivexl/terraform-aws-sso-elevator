FROM ghcr.io/astral-sh/uv:0.9.5 AS uv

# First, bundle the dependencies into the layer structure
FROM public.ecr.aws/lambda/python:3.13 AS builder

# Enable bytecode compilation for better cold-start performance
ENV UV_COMPILE_BYTECODE=1

# Disable installer metadata to create a deterministic layer
ENV UV_NO_INSTALLER_METADATA=1

# Enable copy mode to support bind mount caching
ENV UV_LINK_MODE=copy

# Bundle the dependencies into /asset/python for Lambda layer structure
# Convert lock file to requirements.txt, then install to target
# This ensures Docker layer cache is only invalidated when pyproject.toml or uv.lock change
RUN --mount=from=uv,source=/uv,target=/bin/uv \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=layer/uv.lock,target=uv.lock \
    --mount=type=bind,source=layer/pyproject.toml,target=pyproject.toml \
    uv export --frozen --no-emit-workspace --no-dev --no-editable -o requirements.txt && \
    uv pip install --python-platform linux --target /asset/python -r requirements.txt

# Final stage for layer
FROM scratch
COPY --from=builder /asset /asset
